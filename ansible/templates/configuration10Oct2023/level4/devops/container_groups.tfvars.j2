
# rover runner: aztfmod/rover:1.5.2-2307.0508
# command override
# [ "/bin/bash", "-c", "echo hello; sleep 100000; sleep infinity"]
# image  = "aztfmod/rover:1.5.2-2307.0508" # "ubuntu"
# or
# # Overrides default command so things don't shut down after the process ends.
# command: /bin/sh -c "while sleep 1000; do :; done"
container_groups = {
  runner_aci = {
    name               = "runner-devops"
    region             = "region1"
    resource_group_key = "devops_rg"
    ip_address_type    = "Private"
    # TODO: add var.settings.network.subnets : can(value.subnet_id)
    network = {
      subnets = {
        subnet1 = {
          subnet_id = "/subscriptions/{{subscription_id}}/resourceGroups/{{resource_group_name}}/providers/Microsoft.Network/virtualNetworks/{{devops_vnet_name}}/subnets/{{prefix}}-snet-runner-devops"
        }
      }
    }
    os_type            = "Linux"
    restart_policy     = "OnFailure" // Possible values are 'Always'(default) 'Never' 'OnFailure'

    containers = {
      runner = {
        name   = "devops-runner"
        image  = "aztfmod/rover:1.5.2-2307.0508" # "ubuntu"
        cpu    = "1"
        memory = "2"
        ports = {
          80 = {
            port     = 80
            protocol = "TCP"
          }
          443 = {
            port     = 443
            protocol = "TCP"
          }          
          22 = {
            port     = 22
            protocol = "TCP"
          }          
        }

        # sleep infinity - to avoid termination of container
        # Overrides default command so things don't shut down after the process ends.
        commands = ["/bin/sh", "-c", "while sleep 1000; do :; done"]

        variables_from_command = {
          USERNAME = "variable=$(env | grep USERNAME | sed 's/.*=//' ) && jq -n --arg var $variable '{value: $var}'"
        }

        # # for demo purposes
        # environment_variables = {
        #   URL         = "https://github.com/your_org/your_repo"
        #   name        = "myrover"
        #   ARM_USE_MSI = true
        # }
        # secure_environment_variables = {
        #   AGENT_TOKEN = "replace_with_your_token_from_gha"
        # }
        # # Call the gh api command to generate an agent token to allow the agent to register in th pool
        # # Note as this command always return a new token, it will force the container to be destroyed and recreated.
        # secure_variables_from_command = {
        #   AGENT_TOKEN = "gh api --method POST -H 'Accept: application/vnd.github.v3+json' /repos/orgname/reponame/actions/runners/registration-token | jq -r ' {value: .token}'"
        # }
        # environment_variables_from_resources = {
        #   AGENT_KEYVAULT_NAME = {
        #     output_key    = "keyvaults"
        #     resource_key  = "secrets"
        #     attribute_key = "name"
        #   }
        #   MSI_ID = {
        #     output_key    = "managed_identities"
        #     resource_key  = "rover"
        #     attribute_key = "id"
        #   }
        # }
        # # Get value from a command executed in the rover
        # # env | grep USERNAME will return USERNAME=vscode
        # # the following command will then return vscode and assign it to the container env variable
        # # 1 - set the value to variable, strip the USERNAME= and only keep the value using sed --> variable=$(env | grep USERNAME | sed 's/.*=//' )
        # # 2 - build the json return value with jq and take $variable as input from step1 --> jq -n --arg var $variable '{value: $var}'
        # variables_from_command = {
        #   USERNAME = "variable=$(env | grep USERNAME | sed 's/.*=//' ) && jq -n --arg var $variable '{value: $var}'"
        # }

      }
    } 

    tags = { 
      purpose = "container groups" 
      project-code = "{{project_code}}" 
      env = "{{caf_environment}}" 
      zone = "{{zone_code}}"
      tier = "{{tier_code}}"           
    } 

    identity = {
      type = "SystemAssigned"
    } 

  } 
}
