# must grant contributor right to internet vnet inorder to create correct internal lb
role_mapping = {
  built_in_role_mapping = {
    # resource_groups = {
    #   "aks_re1" = {
    #     "Reader" = {
    #       aks_ingress_application_gateway_identities = {
    #         keys = ["cluster_re1"]
    #       }
    #     }
    #   }
    # }
    # application_gateway_platforms = {
    #   "agw" = {
    #     "Contributor" = {
    #       aks_ingress_application_gateway_identities = {
    #         keys = ["cluster_re1"]
    #       }
    #     }
    #   }
    # }
    # managed_identities = {
    #   "aks_usermsi" = {
    #     "Managed Identity Operator" = {
    #       aks_ingress_application_gateway_identities = {
    #         keys = ["cluster_re1"]
    #       }
    #     }
    #     "Contributor" = {
    #       aks_ingress_application_gateway_identities = {
    #         keys = ["cluster_re1"]
    #       }
    #     }        
    #   }
    # }


    # # role mapping must execute before ask cluster
    # # grant aks_usermsi with right "Private DNS Zone Contributor" to "privatelink.southeastasia.azmk8s.io" private dns zone
    # private_dns = {
    #   aks_dns_re1 = {
    #     "Private DNS Zone Contributor" = {
    #       managed_identities = {
    #         keys = ["aks_usermsi"]
    #       }
    #     }
    #   }
    # } 

    aks_clusters = {
      "cluster_re1" = {
        "Azure Kubernetes Service RBAC Cluster Admin" = {
          logged_in = {         
            keys = ["user"]
          }
        }
      }
    }

    azure_container_registries = {
      aks_acr = {
        "AcrDelete" = {
          managed_identities = {
            lz_key = "shared_services" # if UserAssigned is deployed in remote landingzone              
            keys = ["aks_usermsi"]
          }
        }
        "AcrPush" = {
          managed_identities = {
            lz_key = "shared_services" # if UserAssigned is deployed in remote landingzone               
            keys = ["aks_usermsi"]
          }
        }
        "AcrPull" = {
          managed_identities = {
            lz_key = "shared_services" # if UserAssigned is deployed in remote landingzone               
            keys = ["aks_usermsi"]
          }
        }
      }
    } 

    # mssql_servers = {     #Follow the same way as declaring the service
    #   sql_server = {
    #     lz_key = "mssql"
    #     "SQL Server Contributor" = {
    #       managed_identities = {
    #         keys = ["aks_usermsi"]
    #       }
    #     }
    #   }
    # }

    # storage_accounts = {     #Follow the same way as declaring the service
    #   data_storage = {
    #     lz_key = "level4_services"
    #     "Storage Blob Data Contributor" = {
    #       managed_identities = {
    #         keys = ["aks_usermsi"]
    #       }
    #     }
    #   }
    # } 

    # cosmos_dbs = {     #Follow the same way as declaring the service
    #   cosmos_db = {
    #     lz_key = "shared_services"
    #     "Contributor" = {
    #       managed_identities = {
    #         keys = ["aks_usermsi"]
    #       }
    #     }
    #   }
    # }     

  }
}


# TODO: test the below role mapping
/*
role_mapping = {
  built_in_role_mapping = {
    mssql_servers = {     #Follow the same way as declaring the service
      sql_server = {
        lz_key = "level4_data"
        "SQL Server Contributor" = {
          managed_identities = {
            keys = ["aks_usermsi"]
          }
        }
      }
    }
    storage_accounts = {     #Follow the same way as declaring the service
      data_storage = {
        lz_key = "level4_services"
        "Storage Blob Data Contributor" = {
          managed_identities = {
            keys = ["aks_usermsi"]
          }
        }
      }
    }
    azure_container_registries = {
      acr_private = {
        "AcrDelete" = {
          managed_identities = {
            keys = ["aks_usermsi"]
          }
        }
        "AcrPush" = {
          managed_identities = {
            keys = ["aks_usermsi"]
          }
        }
        "AcrPull" = {
          managed_identities = {
            keys = ["aks_usermsi"]
          }
        }
      }
    }
  }
}
*/
